# -*- coding: utf-8 -*-
"""TASK 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G4rd2uwzs54Ze4eyel2kJ1DMN9uXOst6

**Task 6:** Creating a program for
interactive web scraping.

**Objective:** Fetch data from a website and
present it in a user-friendly way using a
simple web scraping library.
"""

import requests
from bs4 import BeautifulSoup
from prettytable import PrettyTable

def fetch_data(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        print(f"Failed to retrieve the page ! Status code {response.status_code}")
        return None

def scrape_data(url, tag, class_name = None):
    page_content = fetch_data(url)
    if page_content:
        soup = BeautifulSoup(page_content, 'html.parser')

        if class_name:
            elements = soup.find_all(tag, class_=class_name)
        else:
            elements = soup.find_all(tag)

        data = [ element.get_text(strip = True) for element in elements ]
        return data
    return []

def present_table(data, header):
    table = PrettyTable()
    table.field_names = header
    for row in data:
        table.add_row([row])
    print(table)

def interactive_scraping():
    print("\nWELCOME TO WEB SCRAPING PROGRAM ! ")

    url = input("\nEnter a website URL :")
    tag = input("Enter the HTML tag you want to scrape (e.g h1, p, div etc.) :")
    class_name = input("Enter the Class name of the tag (if any, else leave blank) :")

    data = scrape_data(url, tag, class_name if class_name != "" else None)

    if data:
        present_table(data, [f"content from <{tag}>"])
    else:
        print("No data found or an error occured while fetching data ! ")

def test_websites():
    websites = [
        ("https://example.com", "p"),
        ("https://quotes.toscrape.com/", "span", "text"),
        ("https://news.ycombinator.com/", "span", "titleline"),
        ("https://books.toscrape.com/", "h3")
        ]
    for url, tag, *class_name in websites:
        print(f"\nScraping {url} with tag {tag} and class {class_name[0] if class_name else 'None'} ...")
        data = scrape_data(url, tag, class_name[0] if class_name else None)

        if data:
            present_table(data, [f"content from <{tag}>"])
        else:
            print("No data found or an error occured while fetching data ! ")

if __name__=="__main__":
    mode = input("Choose mode :\n1 - Interactive, 2 - Test ")
    if mode == "1":
        interactive_scraping()
    elif mode == "2":
        test_websites()
    else:
        print("Invalid mode selected !")