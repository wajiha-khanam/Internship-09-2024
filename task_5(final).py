# -*- coding: utf-8 -*-
"""TASK 5(Final).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e0z53QEca7t9fbjLDzEH8Ql70sFMiwSq

**Task 5:** Enhancing the CRUD
application to store task data persistently using file I/O.

**Objective:** Implement file storage for tasks to enable saving and loading from a text file.
"""

import os

class TaskManager :
  """
    A class to manage tasks with CRUD operations and file persistence.
    """

  def __init__(self, file_name = 'tasks.txt'):
    self.tasks = []
    self.next_id = 1
    self.file_name = file_name
    self.load_tasks()


  def save_tasks(self):
    """Save tasks to a text file."""
    try:
      with open(self.file_name, "w") as file:
        for task in self.tasks:
          file.write(f"{task['task_id']},{task['title']},{task['description']}\n")
      print("Tasks saved successfully .")
    except IOError:
      print("Error ! Could not save tasks to the file .")


  def load_tasks(self):
    """Load tasks from a text file."""
    if not os.path.exists(self.file_name):
      return

    try:
      with open (self.file_name, "r") as file:
        for line in file:
          task_data = line.strip().split(",")
          task = {
                   'task_id': int(task_data[0]),
                   'title': task_data[1],
                   'description': task_data[2]
                    }
          self.tasks.append(task)
          self.next_id = max(self.next_id, task['task_id'] + 1)
      print("Tasks loaded successfully!")
    except IOError:
        print("Error: Could not load tasks from the file.")


  def create_task(self,title,description):
    task = {
        'task_id' : self.next_id,
        'title' : title,
        'description' : description
    }
    self.tasks.append(task)
    self.next_id += 1
    print(f"Task '{title}' created successfully .")
    self.save_tasks()


  def read_tasks(self):
    if not self.tasks :
      print("No tasks available .")
    else:
      print("LIST OF TASKS : \n")
      for task in self.tasks :
        print(f"TASK ID: {task['task_id']}, TITLE: {task['title']}, DESCRIPTION: {task['description']}")
        print()


  def update_tasks(self, task_id, new_title = None, new_description = None):
    for task in self.tasks:
      if task['task_id'] == task_id :
        if new_title :
          task['title'] = new_title
        if new_description :
          task['description'] = new_description
        print(f"Task ID {task_id} updated successfully .")
        self.save_tasks()
        return

    print(f"Sorry ! Task with ID {task_id} not found . ")


  def delete_tasks(self, task_id):
    for task in self.tasks :
      if task['task_id'] == task_id :
        self.tasks.remove(task)
        print(f"Task with ID {task_id} deleted successfully . ")
        self.save_tasks()
        return

    print(f"Task with ID {task_id} not found . ")


def main():
  task_manager = TaskManager()


  while True:
    print("Welcome to Task Manager : ")
    print("1. Create Task ")
    print("2. Read Tasks ")
    print("3. Update Tasks ")
    print("4. Delete Tasks ")
    print("5. Exit ")
    choice = input("Enter an option (1 - 5) : ")

    if choice == "1":
      title = input("Enter task title : ")
      description = input("Enter task description : ")
      task_manager.create_task(title, description)

    elif choice == "2":
      task_manager.read_tasks()

    elif choice == "3":
      task_id = int(input("Enter the task ID to update : "))
      new_title = input("Enter a new title for the task (Leave blank to keep the current title) : ")
      new_description = input("Enter a new description for the task (Leave blank to keep the current description) : ")
      task_manager.update_tasks(task_id, new_title if new_title else None, new_description if new_description else  None)

    elif choice == "4":
      task_id = int(input("Enter the task ID to delete : "))
      task_manager.delete_tasks(task_id)

    elif choice == "5":
      print("Exiting the Task Manger... Thank you !")
      break

    else :
      print("Invalid input ! Please try again . ")


if __name__ == "__main__" :
  main()